Algorithm

Operations on polynomials
1.  Create new polynomial
2.  Add two polynomials
3.  Display polynomials


define struct polyNode with 3 members: float "coeff", int "exp", self referential pointer "link"

declare 3 polyNode variable pointers: A,B and C. Initialize them to NULL


procedure CreatePolynomial
1.  Start
2.  declare 2 integer variable num and exp and 1 float variable coeff
3.  Read the number of terms in first polynomial, num
4.  Loop num times
        4.1. Read the coefficient and exponent of a term of the first polynomial
        4.2. Create a node of polyNode with the input coefficient and exponents
        4.3. Append the node to the end of list
    end loop
5.  Read the number of terms in second polynomial, num
6.  Loop num times
        6.1. Read the coefficient and exponent of a term of the first polynomial
        6.2. Create a node of polyNode with the input coefficient and exponents
        6.3. Append the node to the end of list
    end loop
7. End procedure


procedure AddPolynomials
1.  Start
2.  declare 4 pointer valriables of type polyNode: tempA,tempB,tempC,node. Initialize tempA to A, tempB to B and tempC to C
3.  Loop while tempA is not NULL, AND tempB is not NULL4
    3.1.  if tempA->exp > tempB->exp
            i.  Creat a new node with data, tempA->coeff and tempA->exp.
            ii. Add the new node to the end of the list C.
            iii.tempA = tempA->link;
        else if tempA->exp = tempB->exp 
            i.  Create a new node with data, (tempA->coeff+tempB->coeff) and tempA->exp
            ii. Add the new node to the end of the list C.
            iii.tempA = tempA->link;
            iv. tempB = tempB->link;
        else if tempA->exp < tempB->exp
            i.  Creat a new node with data, tempB->coeff and tempB->exp.
            ii. Add the new node to the end of the list C.
            iii.tempB = tempB->link;
        end if
4.  Append any remaining nodes from either A or B to the end of the list C.
5.End procedure


procedure displayPolynomials: polyNode *temp
1.  Start
2.  repeat while temp is not NULL
    2.1 print coeff and exponent of each term
    2.2 temp = temp->link
3.End procedure
        